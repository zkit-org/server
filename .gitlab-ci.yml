.get_image_tag_script: &get_image_tag_script |
  if [[ $CI_COMMIT_TAG =~ ^${PROJECT_NAME}-prod-(.*)$ ]]; then
    IMAGE_TAG="prod-${BASH_REMATCH[1]}"
  elif [[ $CI_COMMIT_TAG =~ ^${PROJECT_NAME}-dev-(.*)$ ]]; then
    IMAGE_TAG="dev-${BASH_REMATCH[1]}"
  else
    IMAGE_TAG=$CI_PIPELINE_ID
  fi
  echo "Using image tag: $IMAGE_TAG"

.mvn_package_script: &mvn_package_script |
  java -version
  mvn -v
  mvn install -Dmaven.test.skip=true
  cd $CI_PROJECT_DIR/server-${PROJECT_NAME}/server-${PROJECT_NAME}-api
  mvn clean deploy -U -s $CI_PROJECT_DIR/settings.xml -Dmaven.test.skip=true
  cd $CI_PROJECT_DIR/server-${PROJECT_NAME}/server-${PROJECT_NAME}-service
  mvn clean package -U -s $CI_PROJECT_DIR/settings.xml -Dmaven.test.skip=true

.docker_build_script: &docker_build_script |
  echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  docker build -t $CI_REGISTRY/easy-kit-dev/server/${PROJECT_NAME}:$IMAGE_TAG -f ./Dockerfile .
  docker tag $CI_REGISTRY/easy-kit-dev/server/${PROJECT_NAME}:$IMAGE_TAG $CI_REGISTRY/easy-kit-dev/server/${PROJECT_NAME}:latest
  docker push $CI_REGISTRY/easy-kit-dev/server/${PROJECT_NAME}:$IMAGE_TAG
  docker push $CI_REGISTRY/easy-kit-dev/server/${PROJECT_NAME}:latest
  docker rmi $CI_REGISTRY/easy-kit-dev/server/${PROJECT_NAME}:$IMAGE_TAG
  docker rmi $CI_REGISTRY/easy-kit-dev/server/${PROJECT_NAME}:latest

.deploy_script: &deploy_script |
  git clone https://$GIT_USERNAME:$GIT_TOKEN@git.zkit.org/deploy/easykit.git
  cd easykit
  git checkout main

  BRANCH="${PROJECT_NAME}-${IMAGE_TAG}"
  git checkout -b $BRANCH
  
  yq e ".spec.template.spec.containers[0].image = \"hub.zkit.org/easy-kit-dev/server/${PROJECT_NAME}:${IMAGE_TAG}\"" -i support/${PROJECT_NAME}/deployment.yaml

  git config user.name "gitlab-ci"
  git config user.email "gitlab-ci@local"
  git add support/${PROJECT_NAME}/deployment.yaml
  git commit -m "ci: update targetRevision to $IMAGE_TAG [ci skip]" || echo "No changes to commit"
  git push origin $BRANCH
  
  # 从 IMAGE_TAG 中提取环境信息
  if [[ $IMAGE_TAG =~ ^prod-(.*)$ ]]; then
    ENV="prod"
  elif [[ $IMAGE_TAG =~ ^dev-(.*)$ ]]; then
    ENV="dev"
  else
    ENV="dev"  # 默认为 dev 环境
  fi
  
  ARGOCD_SERVER="$ARGOCD_SERVER"
  ARGOCD_APP="easykit-server-${PROJECT_NAME}-${ENV}"
  ARGOCD_TOKEN="$ARGOCD_TOKEN"
  curl -k \
  -H "Authorization: Bearer $ARGOCD_TOKEN" \
  -H "Content-Type: application/json" \
  -X PATCH "$ARGOCD_SERVER/api/v1/applications/$ARGOCD_APP" \
  -d "{\"spec\":{\"source\":{\"targetRevision\":\"${BRANCH}\"}}}"
  echo "ArgoCD set targetRevision: $BRANCH"
  curl -k \
  -H "Authorization: Bearer $ARGOCD_TOKEN" \
  -H "Content-Type: application/json" \
  -X POST "$ARGOCD_SERVER/api/v1/applications/$ARGOCD_APP/sync" \
  -d "{\"revision\":\"${BRANCH}\"}"
  echo "ArgoCD sync revision: $BRANCH"

stages:
  - package
  - deploy

package-account:
  stage: package
  only:
    - /^account-prod-.*$/
    - /^account-dev-.*$/
  tags:
    - easykit
  variables:
    PROJECT_NAME: "account"
  script:
    - *mvn_package_script
    - *get_image_tag_script
    - *docker_build_script

package-assets:
  stage: package
  only:
    - /^assets-prod-.*$/
    - /^assets-dev-.*$/
  tags:
    - easykit
  variables:
    PROJECT_NAME: "assets"
  script:
    - *mvn_package_script
    - *get_image_tag_script
    - *docker_build_script

deploy-account:
  stage: deploy
  only:
    - /^account-prod-.*$/
    - /^account-dev-.*$/
  tags:
    - easykit
  variables:
    PROJECT_NAME: "account"
  script:
    - *get_image_tag_script
    - *deploy_script

deploy-assets:
  stage: deploy
  only:
    - /^assets-prod-.*$/
    - /^assets-dev-.*$/
  tags:
    - easykit
  variables:
    PROJECT_NAME: "assets"
  script:
    - *get_image_tag_script
    - *deploy_script